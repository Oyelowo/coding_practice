const data2 = [
    { date: 1, value: 93.24 },
    { date: 2, value: 95.35 },
    { date: 3, value: 98.84 },
    { date: 4, value: 99.92 },
    { date: 5, value: 99.8 },
    { date: 6, value: 99.47 },
  ];



      {data.map((el) => {
          return (
            <line
              x1="0"
              y1="0"
              x2={scaleX(new Date(el.date))}
              y2={chartCharacteristics.HEIGHT - 18}
              r={5}
              fill="red"
              stroke="#8b95e1"
            />
          );
        })}


import * as d3 from "d3";
import { eachDayOfInterval } from "date-fns";
import React from "react";

const data = [
  {
    score: 62,
    date: "2020-02-29",
  },
  {
    score: 73,
    date: "2020-03-01",
  },
  {
    score: 28,
    date: "2020-03-02",
  },
  {
    score: 77,
    date: "2020-03-03",
  },
  {
    score: 58,
    date: "2020-03-04",
  },
  {
    score: 87,
    date: "2020-03-05",
  },
  {
    score: 66,
    date: "2020-03-06",
  },
  {
    score: 94,
    date: "2020-03-07",
  },
  {
    score: 63,
    date: "2020-03-08",
  },
];

type CoolDatum = typeof data[number];

const chartCharacteristics = {
  HEIGHT: 500,
  WIDTH: 700,
};

const margins = {
  TOP: 100,
  RIGHT: 40,
  LEFT: 40,
  BOTTOM: 100,
};

const paddings = {
  TOP: 10,
  RIGHT: 10,
  LEFT: 10,
  BOTTOM: 10,
};

const result = eachDayOfInterval({
  start: new Date("2020-02-29"),
  end: new Date("2020-03-10"),
});

const LineChart = () => {
  const kk = data.map((el) => el.score);
  const [minY, maxY] = [Math.min(...kk), Math.max(...kk)];
  const [minX, maxX] = [new Date("2020-02-29"), new Date("2020-03-08")];

  const scaleY = d3
    .scaleLinear()
    .domain([minY, maxY])
    .range([chartCharacteristics.HEIGHT - margins.TOP, 0]);
  const scaleX = d3
    .scaleTime()
    .domain([minX, maxX])
    .range([margins.LEFT, chartCharacteristics.WIDTH - margins.RIGHT]);

  const line = d3
    .line<CoolDatum>()
    //.curve(d3.curveNatural)
    .y((d) => scaleY(d.score))
    .x((d) => scaleX(new Date(d.date)));

  return (
    <svg
      width={chartCharacteristics.WIDTH}
      height={chartCharacteristics.HEIGHT}
      style={{ background: "#eaeaea" }}
    >
      <g>
        <path
          d={line(data) ?? ""}
          fill="none"
          stroke="#8b95e1"
          strokeWidth="2.5"
        />

        {data.map((el) => {
          return (
            <circle
              cx={scaleX(new Date(el.date))}
              cy={scaleY(new Date(el.score))}
              r={5}
              fill="#fff"
              stroke="#8b95e1"
            />
          );
        })}

        {[0, 10, 20, 30, 40, 50, 100].map((score) => {
          return (
            <>
              <line
                x1={0}
                x2={chartCharacteristics.WIDTH}
                y1={scaleY(score)}
                y2={scaleY(score)}
                fill="#fff"
                stroke="#8b95e1"
                strokeOpacity="0.5"
              />

              <text x={50} y={scaleY(score)} stroke="#8b95e1">
                {score}
              </text>
            </>
          );
        })}

        {/*     <line
          x1="0"
          y1={chartCharacteristics.HEIGHT - 20}
          x2={chartCharacteristics.WIDTH}
          y2={chartCharacteristics.HEIGHT - 20}
          r={5}
          fill="red"
          stroke="#8b95e1"
        /> */}

        {result.map((date) => {
          return (
            <>
              <text
                x={scaleX(date)}
                y={chartCharacteristics.HEIGHT - 30}
                stroke="#8b95e1"
              >
                {padDateWithZero(date.getDate().toLocaleString())}
              </text>
            </>
          );
        })}
      </g>
    </svg>
  );
};

export default LineChart;

const padDateWithZero = (number: string) => {
  return number.length > 1 ? number : `0${number}`;
};

