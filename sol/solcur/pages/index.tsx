import {
  Account,
  createMint,
  createTransferInstruction,
  mintTo,
} from "@solana/spl-token";
import {
  Keypair,
  Transaction,
  sendAndConfirmTransaction,
} from "@solana/web3.js";

import { TokenInstruction, TOKEN_PROGRAM_ID } from "@solana/spl-token";
import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useState } from "react";
import styles from "../styles/Home.module.css";

import {
  Connection,
  clusterApiUrl,
  PublicKey,
  LAMPORTS_PER_SOL,
} from "@solana/web3.js";

const getProvider = async () => {
  if ("solana" in window) {
    const provider = (window as any).solana;
    if (provider.isPhantom) {
      return provider;
    }
  } else {
    window.open("https://www.phantom.app/", "_blank");
  }
};

const Home: NextPage = () => {
  const [walletConnected, setWalletConnected] = useState(false);
  const [provider, setProvider] = useState<Keypair | null>(null);
  const [loading, setLoading] = useState(false);

  const [isTokenCreated, setIsTokenCreated] = useState(false);
  const [createdTokenPublicKey, setCreatedTokenPublicKey] = useState(null);
  const [mintingWalletSecretKey, setMintingWalletSecretKey] = useState(null);

  const initialMintHelper = async () => {
    try {
      setLoading(true);
      const connection = new Connection(clusterApiUrl("devnet"), "confirmed");

      const mintRequester = await provider.publicKey;
      const mintingFromWallet = await Keypair.generate();
      setMintingWalletSecretKey(JSON.stringify(mintingFromWallet.secretKey));

      const fromAirDropSignature = await connection.requestAirdrop(
        mintingFromWallet.publicKey,
        LAMPORTS_PER_SOL
      );
      await connection.confirmTransaction(fromAirDropSignature, "confirmed");

      const creatorToken = await createMint(
        connection,
        mintingFromWallet,
        mintingFromWallet.publicKey,
        null,
        6,
        mintingFromWallet,
        { commitment: "confirmed" },
        TOKEN_PROGRAM_ID
      );
      const fromTokenAccount =
        await getOrCreateAssociatedAccountInfo(
          mintingFromWallet.publicKey
        );
      await mintTo(
        connection,
        fromTokenAccount.address,
        mintingFromWallet.publicKey,
        [],
        1000000
      );

      const toTokenAccount =
        await creatorToken.getOrCreateAssociatedAccountInfo(mintRequester);
      const transaction = new Transaction().add(
        createTransferInstruction(
          TOKEN_PROGRAM_ID,
          fromTokenAccount.address,
          toTokenAccount.address,
          mintingFromWallet.publicKey,
          [],
          1000000
        )
      );
      const signature = await sendAndConfirmTransaction(
        connection,
        transaction,
        [mintingFromWallet],
        { commitment: "confirmed" }
      );

      console.log("SIGNATURE:", signature);

      setCreatedTokenPublicKey(creatorToken.publicKey.toString());
      setIsTokenCreated(true);
      setLoading(false);
    } catch (err) {
      console.log(err);
      setLoading(false);
    }
  };

  const walletConnectionHelper = async () => {
    if (walletConnected) {
      //Disconnect Wallet
      setProvider(null);
      setWalletConnected(false);
    } else {
      const userWallet = await getProvider();
      if (userWallet) {
        await userWallet.connect();
        userWallet.on("connect", async () => {
          setProvider(userWallet);
          setWalletConnected(true);
        });
      }
    }
  };

  const airDropHelper = async () => {
    if (!provider) return;
    try {
      setLoading(true);
      const connection = new Connection(clusterApiUrl("devnet"), "confirmed");
      const fromAirDropSignature = await connection.requestAirdrop(
        new PublicKey(provider.publicKey),
        LAMPORTS_PER_SOL
      );
      await connection.confirmTransaction(fromAirDropSignature, "confirmed");

      console.log(
        `1 SOL airdropped to your wallet ${provider.publicKey.toString()} successfully`
      );
      setLoading(false);
    } catch (err) {
      console.log(err);
      setLoading(false);
    }
  };
  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        {/* <link rel="stylesheet" href="/pico/css/pico.min.css" /> */}
      </Head>
      {/* <Document>

      </Document> */}

      <main>
        <h1>Create your own token using JavaScript</h1>

        {walletConnected ? (
          <p>
            <strong>Public Key:</strong> {provider?.publicKey.toString()}
          </p>
        ) : (
          <p></p>
        )}

        <br />
        <br />
        <br />

        {walletConnected ? (
          <p>
            Airdrop 1 SOL into your wallet
            <button disabled={loading} onClick={airDropHelper}>
              AirDrop SOL{" "}
            </button>
          </p>
        ) : (
          <></>
        )}

        <br />
        <br />
        <br />
        <button onClick={walletConnectionHelper} disabled={loading}>
          {!walletConnected ? "Connect Wallet" : "Disconnect Wallet"}
        </button>

        <br />
        <br />
        <br />

        {walletConnected ? (
          <p>
            Create your own token
            <button disabled={loading} onClick={initialMintHelper}>
              Initial Mint{" "}
            </button>
          </p>
        ) : (
          <></>
        )}
      </main>

      <footer className={styles.footer}></footer>
    </div>
  );
};

export default Home;
function getOrCreateAssociatedAccountInfo(publicKey: PublicKey) {
  throw new Error("Function not implemented.");
}

